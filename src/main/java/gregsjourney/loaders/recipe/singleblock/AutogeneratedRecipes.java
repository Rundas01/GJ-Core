package gregsjourney.loaders.recipe.singleblock;

import gregsjourney.api.unification.property.CrystallizationProperty;
import gregsjourney.api.unification.property.DistillationProperty;
import gregsjourney.api.unification.property.GJMaterialFlags;
import gregsjourney.api.unification.property.GJPropertyKeys;
import gregtech.api.GregTechAPI;
import gregtech.api.recipes.RecipeBuilder;
import gregtech.api.recipes.builders.UniversalDistillationRecipeBuilder;
import gregtech.api.unification.material.Material;
import gregtech.api.unification.stack.MaterialStack;

import static gregsjourney.api.utils.GJUtil.*;
import static gregsjourney.common.recipe.GJRecipeMaps.CHEMICAL_DEHYDRATOR_RECIPES;
import static gregsjourney.common.recipe.GJRecipeMaps.CRYSTALLIZATION_RECIPES;
import static gregtech.api.GTValues.VA;
import static gregtech.api.recipes.RecipeMaps.DISTILLATION_RECIPES;
import static gregtech.api.recipes.RecipeMaps.DISTILLERY_RECIPES;
import static gregtech.api.unification.ore.OrePrefix.dust;

public class AutogeneratedRecipes {
    public static void init() {
        for (Material material : GregTechAPI.materialManager.getRegisteredMaterials()) {
            if (material.hasFlag(GJMaterialFlags.CRYSTALLIZABLE) && material.hasProperty(GJPropertyKeys.CRYSTALLIZATION_PROPERTY_KEY)) {
                addCrystallizationAndDehydrationRecipes(material);
            }
            if (material.hasFlag(GJMaterialFlags.DISTILLABLE) && material.hasProperty(GJPropertyKeys.DISTILLATION_PROPERTY_KEY)) {
                addDistillationRecipes(material);
            }
        }
    }

    private static void addDistillationRecipes(Material material) {
        DistillationProperty property = material.getProperty(GJPropertyKeys.DISTILLATION_PROPERTY_KEY);
        int i = 1;
        RecipeBuilder<UniversalDistillationRecipeBuilder> builder = DISTILLATION_RECIPES.recipeBuilder()
                .fluidInputs(material.getFluid(1000 * material.getMaterialComponents().size()))
                .EUt(VA[property.tier() + 1]).duration((int) (material.getMass()));
        for (MaterialStack stack : material.getMaterialComponents()) {
            builder.fluidOutputs(stack.material.getFluid((int) (1000 * stack.amount)));
            DISTILLERY_RECIPES.recipeBuilder()
                    .circuitMeta(i)
                    .fluidInputs(material.getFluid(1000 * material.getMaterialComponents().size()))
                    .fluidOutputs(stack.material.getFluid((int) (1000 * stack.amount)))
                    .EUt(VA[property.tier()]).duration((int) (material.getMass() / 2)).buildAndRegister();
            i++;
        }
        builder.buildAndRegister();
    }

    private static void addCrystallizationAndDehydrationRecipes(Material material) {
        CrystallizationProperty property = material.getProperty(GJPropertyKeys.CRYSTALLIZATION_PROPERTY_KEY);
        Material crystallizedSolution = property.crystallizedSolution();
        Material dustMaterial = getSolidMaterialFromSolution(material);
        Material solventMaterial = getLiquidMaterialFromSolution(material);

        assert crystallizedSolution != null;

        CRYSTALLIZATION_RECIPES.recipeBuilder()
                .fluidInputs(material.getFluid(1000))
                .fluidOutputs(crystallizedSolution.getFluid(1000))
                .EUt(VA[property.tier()]).duration((int) (material.getMass() / 2)).buildAndRegister();

        assert dustMaterial != null;
        assert solventMaterial != null;

        CHEMICAL_DEHYDRATOR_RECIPES.recipeBuilder()
                .fluidInputs(crystallizedSolution.getFluid(1000))
                .output(dust, dustMaterial, getToalComponentAmounts(dustMaterial) * getComponentAmount(material, dustMaterial))
                .fluidOutputs(solventMaterial.getFluid(1000 * getComponentAmount(material, solventMaterial)))
                .EUt(VA[property.tier()]).duration((int) material.getMass()).buildAndRegister();
    }
}
